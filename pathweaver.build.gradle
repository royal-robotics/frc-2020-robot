// Load the pathweaver jar file into the groovy script execution classpath.
buildscript {
    dependencies {
        if (pathWeaverJarFile != null && pathWeaverJarFile instanceof java.io.File) {
            classpath files(pathWeaverJarFile)
        } else {
            throw new Exception("\"pathWeaverJarFile\" must be defined")
        }
    }
}

import java.nio.file.*
import edu.wpi.first.pathweaver.*

// Find the pathweaver project, and then parse its properties.
def buildSrcRoot = project.buildscript.sourceFile.getParentFile()
def projectFolderName = buildSrcRoot.toPath().resolve("tools/pathweaver").toRealPath().toString();
def projectPreferences = ProjectPreferences.getInstance(projectFolderName)

// Make sure the output directory is created
def outputFolderPath = projectPreferences.getOutputDir().toPath()
Files.createDirectories(outputFolderPath);

// Generate the trajectory for each file in the paths directory
def pathsFolderName = projectFolderName + "/Paths/"
def pathsFolderFile = new File(pathsFolderName);
def pathsFolderFiles = pathsFolderFile.listFiles()
for (def pathFile : pathsFolderFiles) {
    def pathweaverPathName = pathFile.getName()
    def pathweaverPath = PathIOUtil.importPath(pathsFolderName, pathweaverPathName)

    def compileTemplateTask = task "PathWeaver Build ${pathweaverPathName}" {

        // Set inputs and outputs to enable incremental build
        inputs.file file(pathFile)
        outputs.file "None"

        doLast {
            def outputPath = outputFolderPath.resolve(pathweaverPathName);
            if(!pathweaverPath.getSpline().writeToFile(outputPath)) {
                println("Failed to Update");
                throw new Exception("Failed to output trajectory")
            }

            def outputFile = new File("${outputPath.toString()}.wpilib.json")
            println "Built PathWeaver Path: ${pathweaverPathName}"
            println "To target trajectory:  ${outputFile.toPath().toRealPath()}"
        }
    }
    build.finalizedBy(compileTemplateTask)
    tasks.deploy.dependsOn(compileTemplateTask)
}

println "Found ${pathsFolderFiles.size()} pathweaver path."
for (def file : pathsFolderFiles) {
    println("\t${file.getName()}")
}
